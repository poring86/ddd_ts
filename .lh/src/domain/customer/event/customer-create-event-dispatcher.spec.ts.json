{
    "sourceFile": "src/domain/customer/event/customer-create-event-dispatcher.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1697399277891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1697400619740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import EventDispatcher from \"../../shared/event/event-dispatcher\";\n-import CostumerAddressChanged from \"./customer-address-changed.event\";\n+import CostumerAddressChanged from \"./change-address.event\";\n import CustomerCreatedEvent from \"./customer-created.event\";\n import EnviaConsoleLog1Handler from \"./handler/envia-console-log-1.handler\";\n import EnviaConsoleLog2Handler from \"./handler/envia-console-log-2.handler\";\n \n"
                },
                {
                    "date": 1697400772828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import EventDispatcher from \"../../shared/event/event-dispatcher\";\n-import CostumerAddressChanged from \"./change-address.event\";\n import CustomerCreatedEvent from \"./customer-created.event\";\n import EnviaConsoleLog1Handler from \"./handler/envia-console-log-1.handler\";\n import EnviaConsoleLog2Handler from \"./handler/envia-console-log-2.handler\";\n \n"
                }
            ],
            "date": 1697399277891,
            "name": "Commit-0",
            "content": "import EventDispatcher from \"../../shared/event/event-dispatcher\";\nimport CostumerAddressChanged from \"./customer-address-changed.event\";\nimport CustomerCreatedEvent from \"./customer-created.event\";\nimport EnviaConsoleLog1Handler from \"./handler/envia-console-log-1.handler\";\nimport EnviaConsoleLog2Handler from \"./handler/envia-console-log-2.handler\";\n\ndescribe(\"Customer Create events tests\", () => {\n  it(\"should register events handlers\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog2Handler();\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(1);\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n    ).toMatchObject(eventHandler2);\n  });\n\n  it(\"should unregister an event handler\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog2Handler();\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1)\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(1);\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n    ).toMatchObject(eventHandler2);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(2);\n\n    eventDispatcher.unregister(\"CustomerCreatedEvent\", eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(1);\n\n    eventDispatcher.unregister(\"CustomerCreatedEvent\", eventHandler2);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(0);\n  });\n\n  it(\"should unregister all event handlers\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog1Handler();\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(1);\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n    ).toMatchObject(eventHandler2);\n\n    eventDispatcher.unregisterAll();\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n    ).toBeUndefined();\n  });\n\n  it(\"should notify all event handlers\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog2Handler();\n\n    const spyEventHandler1 = jest.spyOn(eventHandler1, \"handle\");\n    const spyEventHandler2 = jest.spyOn(eventHandler2, \"handle\");\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n    ).toMatchObject(eventHandler2);\n\n    const customerCreatedEvent = new CustomerCreatedEvent({\n      id: \"123\",\n      name: \"Matheus\",\n    });\n\n    eventDispatcher.notify(customerCreatedEvent);\n\n    expect(spyEventHandler1).toHaveBeenCalled();\n    expect(spyEventHandler2).toHaveBeenCalled();\n  });\n});\n"
        }
    ]
}