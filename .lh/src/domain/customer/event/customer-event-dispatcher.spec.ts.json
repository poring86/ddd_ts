{
    "sourceFile": "src/domain/customer/event/customer-event-dispatcher.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1696423178403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1696423187397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     ).toBeDefined();\n \n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n-    ).toBe(2);\n+    ).toBe();\n \n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n     ).toMatchObject(eventHandler1);\n"
                },
                {
                    "date": 1696423206868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,11 +23,15 @@\n     ).toBeDefined();\n \n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n-    ).toBe();\n+    ).toBe(1);\n \n     expect(\n+      eventDispatcher.getEventHandlers[\"CostumerAddressChanged\"].length\n+    ).toBe(1);\n+\n+    expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n     ).toMatchObject(eventHandler1);\n     expect(\n       eventDispatcher.getEventHandlers[\"CostumerAddressChanged\"][0]\n"
                },
                {
                    "date": 1696423359987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,17 +12,19 @@\n \n     eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n \n     expect(\n+      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n+    ).toBeDefined();\n+\n+    expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n     ).toBe(1);\n \n     eventDispatcher.register(\"CostumerAddressChanged\", eventHandler2);\n \n-    expect(\n-      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n-    ).toBeDefined();\n \n+\n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n     ).toBe(1);\n \n"
                },
                {
                    "date": 1696423388924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,12 @@\n     ).toBe(1);\n \n     eventDispatcher.register(\"CostumerAddressChanged\", eventHandler2);\n \n+    expect(\n+      eventDispatcher.getEventHandlers[\"CostumerAddressChanged\"]\n+    ).toBeDefined();\n \n-\n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n     ).toBe(1);\n \n"
                },
                {
                    "date": 1696423511426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n     const eventHandler1 = new EnviaConsoleLog1Handler();\n     const eventHandler2 = new EnviaConsoleLog1Handler();\n \n     eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n-    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n+    eventDispatcher.register(\"CostumerAddressChanged\", eventHandler2);\n \n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n     ).toMatchObject(eventHandler1);\n"
                },
                {
                    "date": 1696423676192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n     ).toMatchObject(eventHandler1);\n     expect(\n-      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n+      eventDispatcher.getEventHandlers[\"CostumerAddressChanged\"][0]\n     ).toMatchObject(eventHandler2);\n \n     eventDispatcher.unregisterAll();\n \n"
                },
                {
                    "date": 1696423697888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,12 @@\n \n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n     ).toBeUndefined();\n+\n+    expect(\n+      eventDispatcher.getEventHandlers[\"CostumerAddressChanged\"]\n+    ).toBeUndefined();\n   });\n \n   it(\"should notify all event handlers\", () => {\n     const eventDispatcher = new EventDispatcher();\n"
                },
                {
                    "date": 1696423877762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,24 +55,24 @@\n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n     ).toBeDefined();\n \n-    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n+    eventDispatcher.register(\"CostumerAddressChanged\", eventHandler2);\n \n     expect(\n-      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n+      eventDispatcher.getEventHandlers[\"CostumerAddressChanged\"][0]\n     ).toMatchObject(eventHandler2);\n \n     eventDispatcher.unregister(\"CustomerCreatedEvent\", eventHandler1);\n \n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n     ).toBe(1);\n \n-    eventDispatcher.unregister(\"CustomerCreatedEvent\", eventHandler2);\n+    eventDispatcher.unregister(\"CostumerAddressChanged\", eventHandler2);\n \n     expect(\n-      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n+      eventDispatcher.getEventHandlers[\"CostumerAddressChanged\"].length\n     ).toBe(0);\n   });\n \n   it(\"should unregister all event handlers\", () => {\n"
                },
                {
                    "date": 1696423887858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n     eventDispatcher.unregister(\"CustomerCreatedEvent\", eventHandler1);\n \n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n-    ).toBe(1);\n+    ).toBe(0);\n \n     eventDispatcher.unregister(\"CostumerAddressChanged\", eventHandler2);\n \n     expect(\n"
                }
            ],
            "date": 1696423178403,
            "name": "Commit-0",
            "content": "import EventDispatcher from \"../../shared/event/event-dispatcher\";\nimport CostumerAddressChanged from \"./customer-address-changed.event\";\nimport CustomerCreatedEvent from \"./customer-created.event\";\nimport EnviaConsoleLog1Handler from \"./handler/envia-console-log-1.handler\";\nimport EnviaConsoleLog2Handler from \"./handler/envia-console-log-2.handler\";\n\ndescribe(\"Customer Domain events tests\", () => {\n  it(\"should register events handlers\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog2Handler();\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(1);\n\n    eventDispatcher.register(\"CostumerAddressChanged\", eventHandler2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n    ).toBeDefined();\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CostumerAddressChanged\"][0]\n    ).toMatchObject(eventHandler2);\n  });\n\n  it(\"should unregister an event handler\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog2Handler();\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n    ).toBeDefined();\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n    ).toMatchObject(eventHandler2);\n\n    eventDispatcher.unregister(\"CustomerCreatedEvent\", eventHandler1);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(1);\n\n    eventDispatcher.unregister(\"CustomerCreatedEvent\", eventHandler2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(0);\n  });\n\n  it(\"should unregister all event handlers\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog1Handler();\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n    ).toMatchObject(eventHandler2);\n\n    eventDispatcher.unregisterAll();\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n    ).toBeUndefined();\n  });\n\n  it(\"should notify all event handlers\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog2Handler();\n\n    const spyEventHandler1 = jest.spyOn(eventHandler1, \"handle\");\n    const spyEventHandler2 = jest.spyOn(eventHandler2, \"handle\");\n\n    eventDispatcher.register(\"CostumerAddressChanged\", eventHandler2);\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CostumerAddressChanged\"][0]\n    ).toMatchObject(eventHandler2);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n\n    const customerCreatedEvent = new CustomerCreatedEvent({\n      id: \"123\",\n      name: \"Matheus\",\n    });\n\n    const customerChangedAddressEvent = new CostumerAddressChanged({\n      id: \"123\",\n      name: \"Matheus\",\n      street: \"Street 1\",\n      number: 123,\n      zip: \"23234-250\",\n      city: \"São Paulo\",\n    });\n\n    eventDispatcher.notify(customerCreatedEvent);\n    eventDispatcher.notify(customerChangedAddressEvent);\n\n    expect(spyEventHandler1).toHaveBeenCalled();\n    expect(spyEventHandler2).toHaveBeenCalled();\n  });\n});\n"
        }
    ]
}