{
    "sourceFile": "src/domain/customer/event/customer-event-dispatcher.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1697397843033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1697398340903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,22 @@\n import EventDispatcher from \"../../shared/event/event-dispatcher\";\n import CostumerAddressChanged from \"./customer-address-changed.event\";\n import CustomerCreatedEvent from \"./customer-created.event\";\n import EnviaConsoleLog1Handler from \"./handler/envia-console-log-1.handler\";\n-import EnviaConsoleLog2Handler from \"./handler/change-address.handler\";\n+import EnviaConsoleLog2Handler from \"./handler/envia-console-log-2.handler\";\n \n describe(\"Customer Domain events tests\", () => {\n   it(\"should register events handlers\", () => {\n     const eventDispatcher = new EventDispatcher();\n     const eventHandler1 = new EnviaConsoleLog1Handler();\n     const eventHandler2 = new EnviaConsoleLog2Handler();\n \n     eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n+    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n \n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n-    ).toBe(1);\n+    ).toBe(2);\n \n     eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n \n     expect(\n"
                },
                {
                    "date": 1697398429034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,10 @@\n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n     ).toBe(2);\n \n+    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n+\n     eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n \n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n"
                },
                {
                    "date": 1697398467656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,13 +15,11 @@\n \n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n     ).toBe(2);\n+    \n \n-    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n \n-    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n-\n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n     ).toBeDefined();\n \n"
                },
                {
                    "date": 1697398658506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,21 +10,14 @@\n     const eventHandler1 = new EnviaConsoleLog1Handler();\n     const eventHandler2 = new EnviaConsoleLog2Handler();\n \n     eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n-    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n-\n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n-    ).toBe(2);\n+    ).toBe(1);\n \n-\n-\n+    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n     expect(\n-      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n-    ).toBeDefined();\n-\n-    expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n     ).toBe(2);\n \n     expect(\n@@ -39,22 +32,23 @@\n     const eventDispatcher = new EventDispatcher();\n     const eventHandler1 = new EnviaConsoleLog1Handler();\n     const eventHandler2 = new EnviaConsoleLog2Handler();\n \n-    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n-\n+    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1)\n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n     ).toMatchObject(eventHandler1);\n     expect(\n-      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n-    ).toBeDefined();\n+      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n+    ).toBe(1);\n \n     eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n-\n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n     ).toMatchObject(eventHandler2);\n+    expect(\n+      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n+    ).toBe(2);\n \n     eventDispatcher.unregister(\"CustomerCreatedEvent\", eventHandler1);\n \n     expect(\n"
                },
                {
                    "date": 1697398784702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,15 @@\n     const eventHandler1 = new EnviaConsoleLog1Handler();\n     const eventHandler2 = new EnviaConsoleLog1Handler();\n \n     eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n+    expect(\n+      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n+    ).toBe(1);\n     eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n+    expect(\n+      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n+    ).toBe(2);\n \n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n     ).toMatchObject(eventHandler1);\n@@ -77,8 +83,11 @@\n \n     eventDispatcher.unregisterAll();\n \n     expect(\n+      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n+    ).toBe(0);\n+    expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n     ).toBeUndefined();\n   });\n \n@@ -89,13 +98,13 @@\n \n     const spyEventHandler1 = jest.spyOn(eventHandler1, \"handle\");\n     const spyEventHandler2 = jest.spyOn(eventHandler2, \"handle\");\n \n-    eventDispatcher.register(\"CostumerAddressChanged\", eventHandler2);\n+    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n     eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n \n     expect(\n-      eventDispatcher.getEventHandlers[\"CostumerAddressChanged\"][0]\n+      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n     ).toMatchObject(eventHandler2);\n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n     ).toMatchObject(eventHandler1);\n"
                }
            ],
            "date": 1697397843033,
            "name": "Commit-0",
            "content": "import EventDispatcher from \"../../shared/event/event-dispatcher\";\nimport CostumerAddressChanged from \"./customer-address-changed.event\";\nimport CustomerCreatedEvent from \"./customer-created.event\";\nimport EnviaConsoleLog1Handler from \"./handler/envia-console-log-1.handler\";\nimport EnviaConsoleLog2Handler from \"./handler/change-address.handler\";\n\ndescribe(\"Customer Domain events tests\", () => {\n  it(\"should register events handlers\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog2Handler();\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(1);\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n    ).toBeDefined();\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n    ).toMatchObject(eventHandler2);\n  });\n\n  it(\"should unregister an event handler\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog2Handler();\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n    ).toBeDefined();\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n    ).toMatchObject(eventHandler2);\n\n    eventDispatcher.unregister(\"CustomerCreatedEvent\", eventHandler1);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(1);\n\n    eventDispatcher.unregister(\"CustomerCreatedEvent\", eventHandler2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(0);\n  });\n\n  it(\"should unregister all event handlers\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog1Handler();\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n    ).toMatchObject(eventHandler2);\n\n    eventDispatcher.unregisterAll();\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n    ).toBeUndefined();\n  });\n\n  it(\"should notify all event handlers\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog2Handler();\n\n    const spyEventHandler1 = jest.spyOn(eventHandler1, \"handle\");\n    const spyEventHandler2 = jest.spyOn(eventHandler2, \"handle\");\n\n    eventDispatcher.register(\"CostumerAddressChanged\", eventHandler2);\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CostumerAddressChanged\"][0]\n    ).toMatchObject(eventHandler2);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n\n    const customerCreatedEvent = new CustomerCreatedEvent({\n      id: \"123\",\n      name: \"Matheus\",\n    });\n\n    const customerChangedAddressEvent = new CostumerAddressChanged({\n      id: \"123\",\n      name: \"Matheus\",\n      street: \"Street 1\",\n      number: 123,\n      zip: \"23234-250\",\n      city: \"São Paulo\",\n    });\n\n    eventDispatcher.notify(customerCreatedEvent);\n    eventDispatcher.notify(customerChangedAddressEvent);\n\n    expect(spyEventHandler1).toHaveBeenCalled();\n    expect(spyEventHandler2).toHaveBeenCalled();\n  });\n});\n"
        }
    ]
}