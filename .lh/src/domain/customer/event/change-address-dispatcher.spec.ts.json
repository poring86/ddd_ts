{
    "sourceFile": "src/domain/customer/event/change-address-dispatcher.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1697399212970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1697399223817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import CustomerCreatedEvent from \"./customer-created.event\";\n import EnviaConsoleLog1Handler from \"./handler/envia-console-log-1.handler\";\n import EnviaConsoleLog2Handler from \"./handler/envia-console-log-2.handler\";\n \n-describe(\"Customer Create events tests\", () => {\n+describe(\"Change Address events tests\", () => {\n   it(\"should register events handlers\", () => {\n     const eventDispatcher = new EventDispatcher();\n     const eventHandler1 = new EnviaConsoleLog1Handler();\n     const eventHandler2 = new EnviaConsoleLog2Handler();\n"
                },
                {
                    "date": 1697399717580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,21 @@\n import EventDispatcher from \"../../shared/event/event-dispatcher\";\n-import CostumerAddressChanged from \"./customer-address-changed.event\";\n+import ChangeAddressEvent from \"./customer-address-changed.event\";\n import CustomerCreatedEvent from \"./customer-created.event\";\n+import ChangeAddressHandler from \"./handler/change-address.handler\";\n import EnviaConsoleLog1Handler from \"./handler/envia-console-log-1.handler\";\n import EnviaConsoleLog2Handler from \"./handler/envia-console-log-2.handler\";\n \n describe(\"Change Address events tests\", () => {\n   it(\"should register events handlers\", () => {\n     const eventDispatcher = new EventDispatcher();\n-    const eventHandler1 = new EnviaConsoleLog1Handler();\n-    const eventHandler2 = new EnviaConsoleLog2Handler();\n+    const changeAddressEventHandler = new ChangeAddressHandler();\n \n-    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n+    eventDispatcher.register(\"ChangeAddressEvent\", changeAddressEventHandler);\n     expect(\n-      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n+      eventDispatcher.getEventHandlers[\"ChangeAddressEvent\"].length\n     ).toBe(1);\n \n-    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n     expect(\n       eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n     ).toBe(2);\n \n"
                },
                {
                    "date": 1697399732590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,17 +15,10 @@\n       eventDispatcher.getEventHandlers[\"ChangeAddressEvent\"].length\n     ).toBe(1);\n \n     expect(\n-      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n-    ).toBe(2);\n-\n-    expect(\n       eventDispatcher.getEventHandlers[\"ChangeAddressEvent\"][0]\n     ).toMatchObject(eventHandler1);\n-    expect(\n-      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n-    ).toMatchObject(eventHandler2);\n   });\n \n   it(\"should unregister an event handler\", () => {\n     const eventDispatcher = new EventDispatcher();\n"
                },
                {
                    "date": 1697399744948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     ).toBe(1);\n \n     expect(\n       eventDispatcher.getEventHandlers[\"ChangeAddressEvent\"][0]\n-    ).toMatchObject(eventHandler1);\n+    ).toMatchObject(changeAddressEventHandler);\n   });\n \n   it(\"should unregister an event handler\", () => {\n     const eventDispatcher = new EventDispatcher();\n"
                }
            ],
            "date": 1697399212969,
            "name": "Commit-0",
            "content": "import EventDispatcher from \"../../shared/event/event-dispatcher\";\nimport CostumerAddressChanged from \"./customer-address-changed.event\";\nimport CustomerCreatedEvent from \"./customer-created.event\";\nimport EnviaConsoleLog1Handler from \"./handler/envia-console-log-1.handler\";\nimport EnviaConsoleLog2Handler from \"./handler/envia-console-log-2.handler\";\n\ndescribe(\"Customer Create events tests\", () => {\n  it(\"should register events handlers\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog2Handler();\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(1);\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n    ).toMatchObject(eventHandler2);\n  });\n\n  it(\"should unregister an event handler\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog2Handler();\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1)\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(1);\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n    ).toMatchObject(eventHandler2);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(2);\n\n    eventDispatcher.unregister(\"CustomerCreatedEvent\", eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(1);\n\n    eventDispatcher.unregister(\"CustomerCreatedEvent\", eventHandler2);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(0);\n  });\n\n  it(\"should unregister all event handlers\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog1Handler();\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(1);\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"].length\n    ).toBe(2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n    ).toMatchObject(eventHandler2);\n\n    eventDispatcher.unregisterAll();\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"]\n    ).toBeUndefined();\n  });\n\n  it(\"should notify all event handlers\", () => {\n    const eventDispatcher = new EventDispatcher();\n    const eventHandler1 = new EnviaConsoleLog1Handler();\n    const eventHandler2 = new EnviaConsoleLog2Handler();\n\n    const spyEventHandler1 = jest.spyOn(eventHandler1, \"handle\");\n    const spyEventHandler2 = jest.spyOn(eventHandler2, \"handle\");\n\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler1);\n    eventDispatcher.register(\"CustomerCreatedEvent\", eventHandler2);\n\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][0]\n    ).toMatchObject(eventHandler1);\n    expect(\n      eventDispatcher.getEventHandlers[\"CustomerCreatedEvent\"][1]\n    ).toMatchObject(eventHandler2);\n\n    const customerCreatedEvent = new CustomerCreatedEvent({\n      id: \"123\",\n      name: \"Matheus\",\n    });\n\n    eventDispatcher.notify(customerCreatedEvent);\n\n    expect(spyEventHandler1).toHaveBeenCalled();\n    expect(spyEventHandler2).toHaveBeenCalled();\n  });\n});\n"
        }
    ]
}